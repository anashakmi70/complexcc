{"ast":null,"code":"import { create } from \"zustand\";\nconst LOCAL_STORAGE_KEY = \"l6ooshGameData\";\nconst loadFromStorage = () => {\n  try {\n    const stored = localStorage.getItem(LOCAL_STORAGE_KEY);\n    return stored ? JSON.parse(stored) : null;\n  } catch {\n    return null;\n  }\n};\nconst saveToStorage = data => {\n  try {\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(data));\n  } catch {}\n};\nconst defaultScores = () => {\n  const rounds = {};\n  for (let r = 1; r <= 4; r++) {\n    rounds[r] = {\n      1: Array(4).fill().map(() => ({\n        L6oosh: [],\n        Diamonds: [],\n        Queens: [],\n        King: []\n      })),\n      2: Array(4).fill().map(() => ({\n        L6oosh: [],\n        Diamonds: [],\n        Queens: [],\n        King: []\n      }))\n    };\n  }\n  return rounds;\n};\nconst defaultNames = [\"Player 1\", \"Player 2\", \"Player 3\", \"Player 4\"];\nexport const useScoreStore = create((set, get) => {\n  const saved = loadFromStorage();\n  const initialScores = (saved === null || saved === void 0 ? void 0 : saved.scores) || defaultScores();\n  const initialNames = (saved === null || saved === void 0 ? void 0 : saved.names) || defaultNames;\n  return {\n    scores: initialScores,\n    names: initialNames,\n    setScores: newScores => {\n      set({\n        scores: newScores\n      });\n      saveToStorage({\n        scores: newScores,\n        names: get().names\n      });\n    },\n    setNames: newNames => {\n      set({\n        names: newNames\n      });\n      saveToStorage({\n        scores: get().scores,\n        names: newNames\n      });\n    },\n    resetScores: () => {\n      const reset = defaultScores();\n      set({\n        scores: reset,\n        names: defaultNames\n      });\n      saveToStorage({\n        scores: reset,\n        names: defaultNames\n      });\n    }\n  };\n});","map":{"version":3,"names":["create","LOCAL_STORAGE_KEY","loadFromStorage","stored","localStorage","getItem","JSON","parse","saveToStorage","data","setItem","stringify","defaultScores","rounds","r","Array","fill","map","L6oosh","Diamonds","Queens","King","defaultNames","useScoreStore","set","get","saved","initialScores","scores","initialNames","names","setScores","newScores","setNames","newNames","resetScores","reset"],"sources":["/Users/anashakmi/Documents/GitHub/complexcc/src/useScoreStore.js"],"sourcesContent":["import { create } from \"zustand\";\n\nconst LOCAL_STORAGE_KEY = \"l6ooshGameData\";\n\nconst loadFromStorage = () => {\n  try {\n    const stored = localStorage.getItem(LOCAL_STORAGE_KEY);\n    return stored ? JSON.parse(stored) : null;\n  } catch {\n    return null;\n  }\n};\n\nconst saveToStorage = (data) => {\n  try {\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(data));\n  } catch {}\n};\n\nconst defaultScores = () => {\n  const rounds = {};\n  for (let r = 1; r <= 4; r++) {\n    rounds[r] = {\n      1: Array(4).fill().map(() => ({\n        L6oosh: [],\n        Diamonds: [],\n        Queens: [],\n        King: [],\n      })),\n      2: Array(4).fill().map(() => ({\n        L6oosh: [],\n        Diamonds: [],\n        Queens: [],\n        King: [],\n      })),\n    };\n  }\n  return rounds;\n};\n\nconst defaultNames = [\"Player 1\", \"Player 2\", \"Player 3\", \"Player 4\"];\n\nexport const useScoreStore = create((set, get) => {\n  const saved = loadFromStorage();\n  const initialScores = saved?.scores || defaultScores();\n  const initialNames = saved?.names || defaultNames;\n\n  return {\n    scores: initialScores,\n    names: initialNames,\n\n    setScores: (newScores) => {\n      set({ scores: newScores });\n      saveToStorage({ scores: newScores, names: get().names });\n    },\n\n    setNames: (newNames) => {\n      set({ names: newNames });\n      saveToStorage({ scores: get().scores, names: newNames });\n    },\n\n    resetScores: () => {\n      const reset = defaultScores();\n      set({ scores: reset, names: defaultNames });\n      saveToStorage({ scores: reset, names: defaultNames });\n    },\n  };\n});\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,SAAS;AAEhC,MAAMC,iBAAiB,GAAG,gBAAgB;AAE1C,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAC5B,IAAI;IACF,MAAMC,MAAM,GAAGC,YAAY,CAACC,OAAO,CAACJ,iBAAiB,CAAC;IACtD,OAAOE,MAAM,GAAGG,IAAI,CAACC,KAAK,CAACJ,MAAM,CAAC,GAAG,IAAI;EAC3C,CAAC,CAAC,MAAM;IACN,OAAO,IAAI;EACb;AACF,CAAC;AAED,MAAMK,aAAa,GAAIC,IAAI,IAAK;EAC9B,IAAI;IACFL,YAAY,CAACM,OAAO,CAACT,iBAAiB,EAAEK,IAAI,CAACK,SAAS,CAACF,IAAI,CAAC,CAAC;EAC/D,CAAC,CAAC,MAAM,CAAC;AACX,CAAC;AAED,MAAMG,aAAa,GAAGA,CAAA,KAAM;EAC1B,MAAMC,MAAM,GAAG,CAAC,CAAC;EACjB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;IAC3BD,MAAM,CAACC,CAAC,CAAC,GAAG;MACV,CAAC,EAAEC,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC,CAACC,GAAG,CAAC,OAAO;QAC5BC,MAAM,EAAE,EAAE;QACVC,QAAQ,EAAE,EAAE;QACZC,MAAM,EAAE,EAAE;QACVC,IAAI,EAAE;MACR,CAAC,CAAC,CAAC;MACH,CAAC,EAAEN,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC,CAACC,GAAG,CAAC,OAAO;QAC5BC,MAAM,EAAE,EAAE;QACVC,QAAQ,EAAE,EAAE;QACZC,MAAM,EAAE,EAAE;QACVC,IAAI,EAAE;MACR,CAAC,CAAC;IACJ,CAAC;EACH;EACA,OAAOR,MAAM;AACf,CAAC;AAED,MAAMS,YAAY,GAAG,CAAC,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,CAAC;AAErE,OAAO,MAAMC,aAAa,GAAGvB,MAAM,CAAC,CAACwB,GAAG,EAAEC,GAAG,KAAK;EAChD,MAAMC,KAAK,GAAGxB,eAAe,CAAC,CAAC;EAC/B,MAAMyB,aAAa,GAAG,CAAAD,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEE,MAAM,KAAIhB,aAAa,CAAC,CAAC;EACtD,MAAMiB,YAAY,GAAG,CAAAH,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEI,KAAK,KAAIR,YAAY;EAEjD,OAAO;IACLM,MAAM,EAAED,aAAa;IACrBG,KAAK,EAAED,YAAY;IAEnBE,SAAS,EAAGC,SAAS,IAAK;MACxBR,GAAG,CAAC;QAAEI,MAAM,EAAEI;MAAU,CAAC,CAAC;MAC1BxB,aAAa,CAAC;QAAEoB,MAAM,EAAEI,SAAS;QAAEF,KAAK,EAAEL,GAAG,CAAC,CAAC,CAACK;MAAM,CAAC,CAAC;IAC1D,CAAC;IAEDG,QAAQ,EAAGC,QAAQ,IAAK;MACtBV,GAAG,CAAC;QAAEM,KAAK,EAAEI;MAAS,CAAC,CAAC;MACxB1B,aAAa,CAAC;QAAEoB,MAAM,EAAEH,GAAG,CAAC,CAAC,CAACG,MAAM;QAAEE,KAAK,EAAEI;MAAS,CAAC,CAAC;IAC1D,CAAC;IAEDC,WAAW,EAAEA,CAAA,KAAM;MACjB,MAAMC,KAAK,GAAGxB,aAAa,CAAC,CAAC;MAC7BY,GAAG,CAAC;QAAEI,MAAM,EAAEQ,KAAK;QAAEN,KAAK,EAAER;MAAa,CAAC,CAAC;MAC3Cd,aAAa,CAAC;QAAEoB,MAAM,EAAEQ,KAAK;QAAEN,KAAK,EAAER;MAAa,CAAC,CAAC;IACvD;EACF,CAAC;AACH,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}